// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
  // url      = env("DATABASE_URL") //  url  = "file:./dev.db"
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  userName String?
  password String

  //Must create a profile whenever create a new user
  profile   Profile @relation(fields: [profileId], references: [id]) // references `id` of `Profile`
  profileId Int     @unique

  //Must create a library whenever create a new user
  library   Library @relation(fields: [libraryId], references: [id])
  libraryId Int     @unique

  rate    Rate[]
  reviews Review[]
}

model Profile {
  id             Int               @id @default(autoincrement())
  user           User?
  registeredDate DateTime
  timeUsedInApp  Int               @default(0) //Total time used in minute
  likedItem      Int               @default(0)
  preferences    TagsInProfiles[]
  history        ItemsInProfiles[]
}

// Define an abstract model called `Item` that serves as the base for movies, books, and songs.
model Item {
  id        Int                @id @default(autoincrement())
  itemType  String // This field specifies the type of item (e.g., "movie", "book", "song")
  movie     Movie?
  book      Book?
  song      Song?
  title     String
  genre     String
  tags      TagInItems[]
  language  String
  avgRate   Float?
  rate      Rate[]
  reviews   Review[]
  People    PeopleInItems[]
  folder    ItemsInFolders[]
  libraries ItemsInLibraries[]
  Profile   ItemsInProfiles[]
}

// Define specific models for movies, books, and songs.
model Movie {
  srcId    String @unique //id from datasource
  duration Int
  itemId   Int    @unique
  item     Item   @relation(fields: [itemId], references: [id])
}

model Book {
  srcId  String @unique //id from datasource
  pages  Int?
  itemId Int    @unique
  item   Item   @relation(fields: [itemId], references: [id])
}

model Song {
  srcId  String  @unique //id from datasource
  album  String?
  itemId Int     @unique
  item   Item    @relation(fields: [itemId], references: [id])
}

model TagInItems {
  item    Item     @relation(fields: [itemId], references: [id])
  itemId  Int
  tag     Tag      @relation(fields: [tagId], references: [id])
  tagId   Int
  addedAt DateTime @default(now())

  @@id([itemId, tagId])
}

model PeopleInItems {
  item     Item     @relation(fields: [itemId], references: [id])
  itemId   Int
  people   People   @relation(fields: [peopleId], references: [id])
  peopleId Int
  addedAt  DateTime @default(now())

  @@id([itemId, peopleId])
}

model Tag {
  id      Int              @id @default(autoincrement())
  name    String
  itemId  Int
  Item    TagInItems[]
  Profile TagsInProfiles[]
}

model People {
  id     Int             @id @default(autoincrement())
  name   String
  role   String
  itemId Int
  item   PeopleInItems[]
}

model Rate {
  id     Int  @id @default(autoincrement())
  rating Int
  userId Int
  user   User @relation(fields: [userId], references: [id])
  itemId Int
  item   Item @relation(fields: [itemId], references: [id])
}

model Review {
  id      Int    @id @default(autoincrement())
  content String
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
  itemId  Int
  item    Item   @relation(fields: [itemId], references: [id])
}

model Library {
  id      Int                @id @default(autoincrement())
  items   ItemsInLibraries[]
  folders Folder[]
  user    User?
}

model ItemsInLibraries {
  library   Library  @relation(fields: [libraryId], references: [id])
  libraryId Int
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
  addedAt   DateTime @default(now())

  @@id([libraryId, itemId])
}

model ItemsInFolders {
  folder   Folder   @relation(fields: [folderId], references: [id])
  folderId Int
  item     Item     @relation(fields: [itemId], references: [id])
  itemId   Int
  addedAt  DateTime @default(now())

  @@id([folderId, itemId])
}

model ItemsInProfiles {
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId Int
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
  addedAt   DateTime @default(now())

  @@id([profileId, itemId])
}

model TagsInProfiles {
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId Int
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     Int
  addedAt   DateTime @default(now())

  @@id([profileId, tagId])
}

model Folder {
  id        Int              @id @default(autoincrement())
  name      String
  series    Series?
  items     ItemsInFolders[]
  Library   Library?         @relation(fields: [libraryId], references: [id])
  libraryId Int?
}

model Series {
  id       Int    @id @default(autoincrement())
  name     String
  folder   Folder @relation(fields: [folderId], references: [id])
  folderId Int    @unique
}
